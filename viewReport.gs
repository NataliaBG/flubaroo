// File: view_report.gas
// Description: 
// This file contains all relevant functions for displaying and emailing
// the report. Note that the URL for the histogram chart is generated by  
// formHistorgramURL(), and is located in 'grading.gas'.


// viewReport: Displays the UI for grading report.
function viewReport()
{
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  
  var grades_sheet = getSheetWithGrades(ss);  
  if (grades_sheet === null)
    {
      Browser.msgBox(langstr("FLB_STR_NOTIFICATION"),
                     langstr("FLB_STR_CANNOT_FIND_GRADES_MSG") + langstr("FLB_STR_SHEETNAME_GRADES"),
                     Browser.Buttons.OK);
      return;
    }
 
  var grades_sheet_is_valid = gwsGradesSheetIsValid(grades_sheet);
  
  // Check if the existing Grades sheet is valid.
  if (!grades_sheet_is_valid)
    {
      // Existing Grades sheet is invalid! Cannot continue with re-grading.
      UI.showMessageBox(langstr("FLB_STR_INVALID_GRADE_SHEET_TITLE"), langstr("FLB_STR_INVALID_GRADES_SHEET"));
      return;
    }
  
   /* form the histogram */
   var points_possible = grades_sheet.getRange(GRADES_POINTS_POSSIBLE_CELL).getValue();
  
   var histogram_buckets = createHistogramBuckets(grades_sheet, points_possible);

   // Record the url of the historgram chart.
   var histogram_url = formHistogramURL(histogram_buckets);
   
   var dp = PropertiesService.getDocumentProperties();
   dp.setProperty(DOC_PROP_HISTOGRAM_URL, histogram_url);
   
   var app = createReportUI(ss, grades_sheet);
   ss.show(app);
}

function createHistogramBuckets(grades_sheet, points_possible)
{
  var dp = PropertiesService.getDocumentProperties();
  
  var num_stud_identifiers = Number(dp.getProperty(DOC_PROP_NUM_STUDENT_IDENTIFIERS));
  var score_col_num = 1 +  num_stud_identifiers + 1;

  var score_col_ltr = convertColNumToColLetter(score_col_num);
  var col_range = score_col_ltr + ":" + score_col_ltr; // i.e. "D:D"
  
  
  var scores = grades_sheet.getRange(col_range).getValues();
  Debug.info(scores);
  // determine the max points possible. could be the case if teacher
  // gave bonus pts.
  for (var i=0; i < scores.length; i++)
    {
      var s = scores[i][0];
      if (!isNaN(s) && (s > points_possible))
        {
          points_possible = s;
        }
    }
  
  // Track number of submissions had that each possible number 
  // of points for its score. Init all to 0. Ranges from 0 to points_possible.
  var histogram_buckets = new Array(points_possible + 1);
  var histogram_len = histogram_buckets.length;
  while (--histogram_len >= 0)
    {
      histogram_buckets[histogram_len] = 0;
    }
    
  for (var i=0; i < scores.length; i++)
    {
      var s = scores[i][0];
      Debug.info("hg s=" + s);
      if ((s !== "") && !isNaN(s))
        {       
          s = Math.floor(s); // round down partial credit for the sake of bucketing (i.e. 1.6 -> 1).

          // Track the number of submissions that had this total score, 
          // for the histogram.
          histogram_buckets[s] += 1;
        }
    }
  
  return histogram_buckets;
}
 
function formHistogramURL(histogram_buckets)
 {
   var max_val = 0;
   for (var i = 0; i < histogram_buckets.length; i++)
     {
       if (histogram_buckets[i] > max_val)
         {
           max_val = histogram_buckets[i];
         }
     }
   
   var url = "http://chart.apis.google.com/chart?chxt=x,y,x,y&chbh=a,0,0&chs=650x280";
   url += "&cht=bvg&chco=6699ff&chtt=Histogram%20of%20Grades";
   
   url += "&chds=0," + max_val + "&chxr=1,0," + max_val + ",1";
   url += "&chxl=0:";
 
   var points_possible = histogram_buckets.length - 1;
   for (var i=0; i <= points_possible; i++)
     {
       url += "%7C" + String(i);
     }
 
   //url+= "|2:|Points%20Scored|3:|Submissions&chxp=2,50|3,50";
   url+= "%7C2:%7CPoints%20Scored%7C3:%7CSubmissions&chxp=2,50%7C3,50";
 
 
   url += "&chd=t:";
   
   for (var i=0; i <= points_possible; i++)
     {
       url += histogram_buckets[i];
       if (i < (points_possible))
         {
           url += ",";
         }
      
     }
   
   return url; 
 }
 
 
 function createReportUI(ss, grades_sheet)
 {
   var dp = PropertiesService.getDocumentProperties();
    
   var app = UiApp.createApplication().setTitle(langstr("FLB_STR_VIEW_REPORT_WINDOW_TITLE"))
                                      .setWidth("680").setHeight("490");
     
   var gws = new GradesWorksheet(ss, INIT_TYPE_GRADED_META);
   var points_possible = gws.getPointsPossible();  
   var avg_subm_score = gws.getAverageScore().toFixed(2);
   var num_subm = gws.getNumGradedSubmissions();
   
   var title = ss.getName();
   
   var chart_url = dp.getProperty(DOC_PROP_HISTOGRAM_URL);
  
   // Declare the handler that will be called when the 'Continue' or 'Cancel'
   // buttons are clicked.
   var handler = app.createServerClickHandler('emailReportHandler');
   
   var email_addr = Session.getEffectiveUser().getEmail();
   var email_addr_field = app.createHidden("email_addr", email_addr)
                                .setId("email_addr").setName("email_addr");
                                  
   var hidden_vars = app.createVerticalPanel().setVisible(false);
   hidden_vars.add(email_addr_field);
   handler.addCallbackElement(email_addr_field);
   
   // create the main panel to hold all content in the UI.
   var main_panel = app.createVerticalPanel()
                       .setStyleAttribute('border-spacing', '10px');
         
   var grid = app.createGrid(4,1).setCellSpacing(5);
   
   grid.setWidget(0, 0, app.createLabel(langstr("FLB_STR_GRADE_SUMMARY_TEXT_REPORT_FOR") + ': ' + title)
                              .setStyleAttribute('textDecoration','underline'));
   grid.setWidget(1, 0, app.createLabel(langstr("FLB_STR_GRADE_SUMMARY_TEXT_POINTS_POSSIBLE") + ': ' + points_possible));
   grid.setWidget(2, 0, app.createLabel(langstr("FLB_STR_GRADE_SUMMARY_TEXT_AVERAGE_POINTS") +  ': ' + avg_subm_score));
   grid.setWidget(3, 0, app.createLabel(langstr("FLB_STR_GRADE_SUMMARY_TEXT_COUNTED_SUBMISSIONS") +  ': ' + num_subm));
   
   // add a top level hpanel for instructions and picture
   var hpanel = app.createHorizontalPanel()
       .setStyleAttribute('border-spacing', '10px')
       .add(app.createImage(chart_url));
   
   main_panel.add(grid);
   main_panel.add(hpanel);
        
    // add the Continue and Cancel buttons at the bottom.
   var btnGrid = app.createGrid(1, 1).setStyleAttribute('float', 'right');
   var btnSubmit = app.createButton(langstr("FLB_STR_VIEW_REPORT_BUTTON_EMAIL_ME"),handler)
                      .setId('EMAIL')
   
   btnGrid.setWidget(0,0,btnSubmit);
   main_panel.add(btnGrid);
   main_panel.add(hidden_vars);
   
   app.add(main_panel);
       
   return app;
 }
 
 function emailReportHandler(e)
 {
   var dp = PropertiesService.getDocumentProperties();
   var app = UiApp.getActiveApplication();
   var ss = SpreadsheetApp.getActiveSpreadsheet(); 
   var gws = new GradesWorksheet(ss, INIT_TYPE_GRADED_META);
   var points_possible = gws.getPointsPossible();  
   var avg_subm_score = gws.getAverageScore().toFixed(2);
   var num_subm = gws.getNumGradedSubmissions();   
   var title = ss.getName();
   var chart_url = dp.getProperty(DOC_PROP_HISTOGRAM_URL);
   var title = ss.getName();
   var email_address = e.parameter.email_addr;
   var msg_title = langstr("FLB_STR_GRADE_SUMMARY_TEXT_REPORT_FOR") + ": " + title;
 
   // form the html to email
   var html_body = '<html><body bgcolor="white">';
   html_body += '<p><b>' + langstr("FLB_STR_GRADE_SUMMARY_TEXT_REPORT_FOR") + ': <a href="' + ss.getUrl() + '">' + title + '</a></b>';
   html_body += '</p>';
   html_body += '<table border=0 cellspacing=2>';
   html_body += '<tr><td>' + langstr("FLB_STR_GRADE_SUMMARY_TEXT_POINTS_POSSIBLE") + ':</td><td>' + points_possible + '</td></tr>';
   html_body += '<tr><td>' + langstr("FLB_STR_GRADE_SUMMARY_TEXT_AVERAGE_POINTS") + ':</td><td>' + avg_subm_score + '</td></tr>';
   html_body += '<tr><td>' + langstr("FLB_STR_GRADE_SUMMARY_TEXT_COUNTED_SUBMISSIONS") + ':</td><td>' + num_subm + '</td></tr>';
   html_body += '</table><br>';
   
   html_body += '<img src="' + chart_url + '">';
       
   html_body += '</body></html>';
   
   //email_address = Session.getActiveUser().getEmail();
   try
     {
     
       // TODO_AJR - Everywhere else emailing can be disabled in debug mode.
     
       MailApp.sendEmail(email_address, msg_title, "",
                                 {htmlBody: html_body, noReply: true, name: "Assignment Grader"});
          
       Browser.msgBox(langstr("FLB_STR_NOTIFICATION"),
                  langstr("FLB_STR_VIEW_REPORT_EMAIL_NOTIFICATION") + ': ' + email_address,
                  Browser.Buttons.OK);
     }
   catch(exception)
     {
       Debug.error("emailReportHandler() - failed to email report - " +
              exception);
     }
   
   return;
 }
 
